export const useCustomContextMenuContent = (target: HTMLDivElement) => {
  const scrapeOptions = {
    attributes: [] as string[],
    others: {
      full: "Whole element",
      content: "Element content",
    },
  };

  /**
   * The function `getTargetAttributes` retrieves the attributes of a target element and adds them to a
   * list of scrape options.
   */
  const getTargetAttributes = () => {
    const attrs = target.attributes;

    [...attrs].forEach(({ name }) => {
      scrapeOptions.attributes.push(name);
    });
  };

  getTargetAttributes();

  /**
   * The `heading` function returns an HTML heading element prompting the user to select the type of
   * content to be scraped.
   * @returns A template string containing an HTML `<h2>` element with the text "Select type of content
   * to be scraped."
   */
  const heading = () => {
    return `
        <h2>Select type of content to be scraped.</h2>
        `;
  };

  /**
   * The `scrapeOption` function generates HTML markup for a checkbox option with an optional label.
   * @param {string} option - The `option` parameter in the `scrapeOption` function represents the value
   * that will be used as the name and id attributes for the input element in the generated HTML.
   * @param {string} [optionLabel] - The `optionLabel` parameter in the `scrapeOption` function is an
   * optional parameter that represents the label text for the checkbox option. If provided, it will be
   * used as the label text for the checkbox. If not provided, the `option` parameter will be used as the
   * label text.
   * @returns The `scrapeOption` function returns an HTML string representing a checkbox option with a
   * label. The HTML structure includes an input checkbox element with the provided `option` as the name
   * and id attributes. If an `optionLabel` is provided, it is used as the label text; otherwise, the
   * `option` itself is used as the label text.
   */
  const scrapeOption = (option: string, optionLabel?: string) => {
    return `
    <div class="scrape-options__option">
    <input name="${option}" id="${option}" type="checkbox"/>
    <label for="${option}">${optionLabel ? optionLabel : option}</label>
    </div>
    `;
  };

  /**
   * The function `scrapeOptionAttributesContent` scrapes the content of attributes for each option in
   * the `scrapeOptions` object.
   * @returns The `scrapeOptionAttributesContent` function is returning the concatenated content of
   * scraping each attribute in the `scrapeOptions.attributes` array using the `scrapeOption` function.
   */
  const scrapeOptionAttributesContent = () => {
    let content = "";

    scrapeOptions.attributes.forEach((option) => {
      content += scrapeOption(option);
    });
    return content;
  };

  /**
   * The `scrapeOptionOthersContent` function iterates over the `scrapeOptions.others` object and
   * generates content by calling the `scrapeOption` function for each key-value pair.
   * @returns The `scrapeOptionOthersContent` function is returning the concatenated content generated by
   * calling the `scrapeOption` function for each key-value pair in the `scrapeOptions.others` object.
   */
  const scrapeOptionOthersContent = () => {
    let content = "";

    for (const [key, value] of Object.entries(scrapeOptions.others)) {
      content += scrapeOption(key, value);
    }

    return content;
  };

  /**
   * The function `actions` returns a string containing HTML elements for two buttons - one for saving
   * scraping and one for canceling.
   * @returns A template string containing HTML code for two buttons - one for saving scraping and one
   * for canceling.
   */
  const actions = () => {
    return `
        <div class="scrape-btns">
        <button type="submit" class="scrape-btn save">Save scraping</button>
        <button type="button" class="scrape-btn cancel">Cancel</button>
        </div>
        `;
  };

  const template = `
    <form class="scrape-form">
      ${heading()}
      <div class="scrape-options">
        ${scrapeOptionAttributesContent()}
        ${scrapeOptionOthersContent()}
      </div>
      ${actions()}
    </form>
    `;

  return template;
};
